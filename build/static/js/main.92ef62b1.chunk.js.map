{"version":3,"sources":["components/PersonForm.js","components/Filter.js","components/Persons.js","services/persons.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["PersonForm","props","onSubmit","addPerson","value","newName","onChange","handleNameChange","newNumber","handleNumberChange","type","Filter","filter","handleFilterChange","Persons","persons","person","name","toLowerCase","includes","map","key","id","number","onClick","handleDeleteClick","baseUrl","axios","get","newObject","post","put","delete","Notification","message","isError","className","App","useState","setPersons","setNewName","setNewNumber","setFilter","setMessage","setIsError","useEffect","personService","then","response","data","event","target","preventDefault","personObject","some","window","confirm","status","currentPerson","setTimeout","concat","object","console","log","catch","error","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.92ef62b1.chunk.js","sourcesContent":["import React from 'react'\n\nconst PersonForm = (props) => (\n  <form onSubmit={props.addPerson}>\n    <div>name: <input\n      value={props.newName}\n      onChange={props.handleNameChange} />\n    </div>\n    <div>number: <input\n      value={props.newNumber}\n      onChange={props.handleNumberChange} />\n    </div>\n    <div>\n      <button type=\"submit\">add</button>\n    </div>\n  </form>\n)\n\nexport default PersonForm","import React from 'react'\n\nconst Filter = ({filter, handleFilterChange}) => (\n    <div>filter shown with<input\n      value={filter}\n      onChange={handleFilterChange} />\n    </div>\n  )\n  \n  \n  \n  export default Filter","import React from 'react'\n\n\nconst Persons = (props) => (\n    props.persons.filter(person => person.name.toLowerCase().includes(props.filter.toLowerCase()))\n      .map(person => <li key={person.id}>{person.name} {person.number} <button onClick={() => props.handleDeleteClick(person)}>delete</button></li>)\n  )\n  \n  export default Persons","import axios from'axios'\nconst baseUrl = 'https://polar-badlands-91844.herokuapp.com/api/persons'\n\nconst getAll = () => {\n    return axios.get(baseUrl)\n  }\n\nconst create = newObject => {\n    return axios.post(baseUrl, newObject)\n}\n\nconst update = (id, newObject) => {\n    return axios.put(`${baseUrl}/${id}`, newObject)\n}\n\nconst remove = id => {\n    \n    return axios.delete(`${baseUrl}/${id}`)\n    \n}\n\nexport default {\n    getAll: getAll,\n    create: create,\n    update: update,\n    remove: remove\n}","import React from 'react'\n\nconst Notification = ({message, isError}) => {\n if (message === null) {\n     return null\n }\n\n return (\n    <div className={isError ? \"error\" : \"notification\"}>\n        {message}\n    </div>\n)\n}\n\nexport default Notification\n\n","import React, { useState, useEffect } from 'react'\nimport PersonForm from './components/PersonForm'\nimport Filter from './components/Filter'\nimport Persons from './components/Persons'\nimport personService from './services/persons'\nimport Notification from './components/Notification'\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filter, setFilter ] = useState('')\n  const [ message, setMessage ] = useState(null)\n  const [ isError, setIsError] = useState(false)\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(response => {\n        setPersons(response.data)\n      })\n\n  },[])\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    const personObject = {\n      name: newName,\n      number: newNumber\n    }\n    \n    if (!persons.some(person => person.name === newName)) { \n      \n      personService\n        .create(personObject)\n        .then(response => {\n          setPersons(persons.concat(response.data))\n          setMessage(`Added ${personObject.name}`)\n          setIsError(false)\n          setTimeout(() => {\n            setMessage(null)\n          }, 5000)\n          setNewName('')\n          setNewNumber('')\n        })\n         \n    } else {\n      if (window.confirm(`${newName} is already added to phonebook, replace old number with new one?`)) {\n        const person = persons.filter(person => person.name === newName)[0]\n        \n        personService\n          .update(person.id, personObject)\n          .then(response => {\n            if (response.status === 200) {\n              setPersons(persons.map(currentPerson => currentPerson.id !== person.id ? currentPerson : response.data))\n              setMessage(`Changed number of ${person.name}`)\n              setIsError(false)\n              setTimeout(() => {\n                setMessage(null)\n              }, 5000)\n            }\n          }\n          )\n        }\n    }\n    setNewName('')\n    setNewNumber('')\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    setFilter(event.target.value)\n  }\n\n  const handleDeleteClick = (object) => {\n    if (window.confirm('Delete ' + object.name + '?' )) {\n      \n      personService\n        .remove(object.id)\n        .then(response => {\n          console.log('ok')\n          setPersons(persons.filter(person => person.id !== object.id))\n          setMessage(`Removed ${object.name}`)\n          setIsError(false)\n          setTimeout(() => {\n            setMessage(null)\n          }, 5000)\n        })\n        .catch(error => {\n          console.log('404')\n          setPersons(persons.filter(person => person.id !== object.id))\n          setMessage(`Information of  ${object.name} has already been removed from server`)\n          setIsError(true)\n          setTimeout(() => {\n            setMessage(null)\n          }, 5000)\n        }\n        )\n    }\n             \n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message} isError={isError} />\n      <Filter filter={filter} handleFilterChange={handleFilterChange}/>\n      <PersonForm addPerson={addPerson} newName={newName} handleNameChange={handleNameChange} newNumber={newNumber} handleNumberChange={handleNumberChange} />\n      <h2>Numbers</h2>\n      <ul>\n        <Persons persons={persons} filter={filter} handleDeleteClick={handleDeleteClick} />\n      </ul>\n    </div>\n  )\n\n}\n\nexport default App\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}